package _30

import (
	"log"
	"testing"
)

func Test_isValidSudoku(t *testing.T) {
	type args struct {
		board [][]byte
	}
	var tests = []struct {
		name string
		args args
		want bool
	}{
		{
			name: "",
			args: args{
				board: [][]byte{
					{5, 3, '.', '.', 7, '.', '.', '.', '.'},
					{6, '.', '.', 1, 9, 5, '.', '.', '.'},
					{'.', 9, 8, '.', '.', '.', '.', 6, '.'},
					{8, '.', '.', '.', 6, '.', '.', '.', 3},
					{4, '.', '.', 8, '.', 3, '.', '.', 1},
					{7, '.', '.', '.', 2, '.', '.', '.', 6},
					{'.', 6, '.', '.', '.', '.', 2, 8, '.'},
					{'.', '.', '.', 4, 1, 9, '.', '.', 5},
					{'.', '.', '.', '.', 8, '.', '.', 7, 9},
				},
			},
			want: true,
		},
		{
			name: "",
			args: args{
				board: [][]byte{
					{8, 3, '.', '.', 7, '.', '.', '.', '.'},
					{6, '.', '.', 1, 9, 5, '.', '.', '.'},
					{'.', 9, 8, '.', '.', '.', '.', 6, '.'},
					{8, '.', '.', '.', 6, '.', '.', '.', 3},
					{4, '.', '.', 8, '.', 3, '.', '.', 1},
					{7, '.', '.', '.', 2, '.', '.', '.', 6},
					{'.', 6, '.', '.', '.', '.', 2, 8, '.'},
					{'.', '.', '.', 4, 1, 9, '.', '.', 5},
					{'.', '.', '.', '.', 8, '.', '.', 7, 9},
				},
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			log.Println([]byte{5, '.'})
			if got := isValidSudoku(tt.args.board); got != tt.want {
				t.Errorf("isValidSudoku() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_Better(t *testing.T) {
	board := [][]byte{
		{8, 3, '.', '.', 7, '.', '.', '.', '.'},
		{6, '.', '.', 1, 9, 5, '.', '.', '.'},
		{'.', 9, 8, '.', '.', '.', '.', 6, '.'},
		{8, '.', '.', '.', 6, '.', '.', '.', 3},
		{4, '.', '.', 8, '.', 3, '.', '.', 1},
		{7, '.', '.', '.', 2, '.', '.', '.', 6},
		{'.', 6, '.', '.', '.', '.', 2, 8, '.'},
		{'.', '.', '.', 4, 1, 9, '.', '.', 5},
		{'.', '.', '.', '.', 8, '.', '.', 7, 9},
	}
	bCur := board[0][0] - '1'
	t.Logf("the bCur is :%+v", bCur)
	cur := 1 << bCur
	t.Logf("the cur is :%+v", cur)
}
